Estamos intentando crear una aplicación web que transforme texto plano
en una lista de TODOS, tal y como estais viendo en esta extension de VSCode.

Principales problemas
  Problema #1: Hemos definido que el editor de texto es un textarea a pantalla completa
    el principal problema es que dentro de un textarea no se pueden definir estilos individuales 
    ni añadir elementos para crear nuestros checkboxes, nuestras etiquetas etc.

    Hay una serie de soluciones que se pueden implementar para solucionar esta problematica
    
    Solucion #1: Separar cada una de las lineas en un tipo de elemento 
      Cuando haya un salto de linea, detectar mediante expresiones regulares que 
      tipo de linea es, por ejemplo con ':' al final de la linea sería un grupo
      con '-' delante de la linea sería un todo, y con ninguno de los dos sería
      una anotacion.
      Contras: Hay que parsear el texto completo cada vez que se hace un input.
      ¿Como se va a ver el carrete del textarea? Si yo hago click en un textarea 
      invisible, esperaria que el carrete se desplace exactamente a ese punto.
      
    Solucion #2: En vez de un textarea, crear un text input por cada linea.
      Con esto lo que conseguimos es que se le puede dar estilo al propio text input
      por lo que el texto no es necesario que sea invisible, esto soluciona el problema
      del carrete pero incorpora nuevas problematicas.


Main Roadmap:
  ✔ Inventar un nombre molón: Dotodo @done(18-09-27 19:26)
  ✔ Generar proyecto de angular con ng cli @started(18-09-27 19:23) @done(18-09-27 19:30) @lasted(7m19s)
  ✔ Arreglar vulnerabilidades @started(18-09-27 19:37) @done(18-09-27 19:38) @lasted(1m13s)
  ✔ Generar la estructura general de la aplicación. @started(18-09-27 19:30) @done(18-09-27 20:36) @lasted(1h6m35s)
  ✔ Definir funcionamiento de la aplicación @started(18-09-27 20:36) @done(18-09-27 20:57) @lasted(21m37s)
    
  Voy a tener que bindear todos los atajos de teclado:
    ✔ [Tab] Incrementar Indentation. @done(18-09-28 18:23)
    ✔ [Shift + Tab ] Reducir Indentation. @done(18-09-28 18:23)
    ✔ [Alt + d] Terminar ToDo. @done(18-09-28 18:23)
    ✔ [Alt + s] Comenzar ToDo. @done(18-09-28 18:23)
    ✔ [Alt + c] Cancelar ToDo. @done(18-09-28 18:23)

  ✔ El textarea en realidad debe de ser invisible y que los componentes se vayan creando dinamicamente segun se escribe @started(18-09-27 20:58) @done(18-09-27 20:58) @lasted(21s)
    En realidad no será invisible el textarea si no que el texto será del mismo color que el fondo y los componentes se crearán encima de este, pero el ratón no les afectará.
    Cuando comienzas a escribir, el texto siempre es una anotación, es decir, será gris, no tendrá estado pero se le podran poner etiquetas con @today 
    Si detecta una arroba se crea un @hohoh 
    
  Shortcuts:
      [Tab] Incrementar Indentation.
      [Shift + Tab ] Reducir Indentation.
      [Alt + d] Terminar Todo.
      [Alt + s] Comenzar Todo.
      [Alt + c] Cancelar Todo.
  
  Definir modelo TODOS: 
    - Definir TodosStateModel:
      Elements: Element[]
      Todos: Todo[]
      - Model: Editor Text
      - UpdateText

      - TodoItemStateModel:
        Name: String
        Indentation: Number
        Type: TodoItemTypeEnum
        Tags[]: TodoItemTag;

    Se pueden definir notas. Las notas son el texto plano sin ningún tipo de puntuacion.
    Se pueden definir Grupos, los grupos se crean cada vez que escribimos : que contienen un listado de Todos.
    Cada Todo Se Representará con [], el estado del todo se sacará de los corchetes. [] -> idle, [s:date] -> started, [d: date ] -> done,  [c: date] -> cancel
    Cada TODO tendrá estado tambien, podrá estar En espera, Comenzado, Finalizado o Cancelado.

  ✔ Generar Items or cada ToDo en el estado @done(18-10-01 12:40)
    ✔ Generar el selector en el estado para devolver los ToDos. @done(18-09-28 11:47)
    ✔ Generar el ngfor para dibujar los todos en el texteditor @done(18-09-28 11:48)
    ✔ Matchear la posición de los todos y del textarea @done(18-09-28 11:54)

  ✔ Mandar un UpdateText al comenzar por si hay texto en el text-box @done(18-10-02 18:20)
  
  ☐ Investigar el doble espacio de white-space: pre-wrap
    Cuando le meto a las ToDos la regla white-space: pre-wrap
    para que respete los espacios en blanco que se dejen en el editor
    me mete un espacio extra que have que se descuadre del textarea, y es un por culo.

  ☐ Arreglar el scroll
    Ahora mismo no tiene scroll la pagina por lo que si pegas un texto mas grande que la altura de la pantalla se va todo a la puta
    Habrá que implementar una directiva para que el textarea haga autogrow, y no limitar la altura del body a 100mh
    Tambien habrá que poner la statusbar en position fixed y arriba del todo de la pantalla a ser posible.
  ✔ RegExp para los tipos de tareas @done(18-09-28 12:45)
  
  ✔ Añadir tipo a los ToDos @started(18-09-28 13:35) @done(18-09-28 17:48) @lasted(4h13m38s)
    ✔ Crear estilos para los diferentes tipos @done(18-09-28 17:48)
    ✔ Crear Expresión regular para detectar el objeto date en los tags. @done(18-10-02 12:37)

Text-Editor-Component:
  ✔ Extraer toda la logica del tratamiento de tags a un servicio @done(18-10-02 18:19)
  ✔ Extraer toda la logica de la validación en un servicio @done(18-10-02 16:43)
  ☐ Extrer Date extension method a cualquier lado donde vaya que aun no se cual es
  
Añadir tags mediante shortcuts:
  ✔ Detectar si el tag ya existe en dicha linea y devolver su posición en dicha linea. @done(18-10-01 15:25)
  ✔ Borrar tag si ya existe @done(18-10-02 12:06)
  ✔ Crear tag con la hora actual si no existe @done(18-10-02 12:06)
  ✔ Solo las tareas se pueden comenzar, terminar o cancelar. @done(18-10-02 13:06)
    ✔ Comprobar si una linea en el shortcut es una tarea. @started(18-10-02 13:00) @done(18-10-02 13:00) @lasted(12s)
Validacion de shortcuts:
  ✔ Una tarea done no puede ser cancelada. @done(18-10-02 16:55)
  ✔ Una tarea finished o cancelada no puede ser empezada. @done(18-10-02 16:55)
  ✔ El tag started no puede ser eliminado de tareas completadas. @done(18-10-02 16:56)
Shortcuts Side Effects:
  ☐ Cuando una tarea se termina o cancela y estaba comenzada en los detalles se añade el timespan transcurrido desde que empezó hasta que terminó. La etiqueta started se cambia por lasted en caso de done o wasted en caso de canceled

Bugs:
  ✔ No deberia enviar el evento textupdate al estado mientras tenemos alt presionado @done(18-10-02 09:13)
  ✔ Ctr+C jumps as shortcut and is not one @done(18-10-02 18:04)
  ✔ Me está cogiendo atajos de teclado simplemente por escribir sin necesidad de alt. @done(18-10-02 18:04)